{"ast":null,"code":"import axios from 'axios';\nimport API_BASE from '../api';\nconst base = `${API_BASE}/guru`;\nexport async function getAllGuru() {\n  const res = await axios.get(base);\n  return res.data;\n}\nexport async function getGuruById(id) {\n  const res = await axios.get(`${base}/${id}`);\n  return res.data;\n}\n\n// Create guru. Accepts plain object or FormData (multipart) for signature upload.\nexport async function createGuru(payload, config = {}) {\n  const isForm = typeof FormData !== 'undefined' && payload instanceof FormData;\n  // IMPORTANT: Do NOT set a manual Content-Type for FormData here.\n  // Let the browser / Axios set the proper multipart boundary header.\n  const headers = isForm ? {\n    ...(config.headers || {})\n  } : {\n    'Content-Type': 'application/json',\n    ...(config.headers || {})\n  };\n  const res = await axios.post(base, payload, {\n    headers,\n    ...config\n  });\n  return res.data;\n}\n\n// Update guru. Accepts object or FormData.\nexport async function updateGuru(id, payload, config = {}) {\n  const isForm = typeof FormData !== 'undefined' && payload instanceof FormData;\n  // Do not set Content-Type manually for FormData; allow Axios/browser to include boundary\n  const headers = isForm ? {\n    ...(config.headers || {})\n  } : {\n    'Content-Type': 'application/json',\n    ...(config.headers || {})\n  };\n  const res = await axios.put(`${base}/${id}`, payload, {\n    headers,\n    ...config\n  });\n  return res.data;\n}\nexport async function deleteGuru(id) {\n  const res = await axios.delete(`${base}/${id}`);\n  return res.data;\n}\nexport default {\n  getAllGuru,\n  getGuruById,\n  createGuru,\n  updateGuru,\n  deleteGuru\n};","map":{"version":3,"names":["axios","API_BASE","base","getAllGuru","res","get","data","getGuruById","id","createGuru","payload","config","isForm","FormData","headers","post","updateGuru","put","deleteGuru","delete"],"sources":["C:/laragon/www/E-RAPORT-NUURUSH-SHOLAAH/e-raport-client/src/services/guruService.js"],"sourcesContent":["import axios from 'axios'\r\nimport API_BASE from '../api'\r\n\r\nconst base = `${API_BASE}/guru`\r\n\r\nexport async function getAllGuru() { const res = await axios.get(base); return res.data }\r\nexport async function getGuruById(id) { const res = await axios.get(`${base}/${id}`); return res.data }\r\n\r\n// Create guru. Accepts plain object or FormData (multipart) for signature upload.\r\nexport async function createGuru(payload, config = {}) {\r\n\tconst isForm = typeof FormData !== 'undefined' && payload instanceof FormData\r\n\t// IMPORTANT: Do NOT set a manual Content-Type for FormData here.\r\n\t// Let the browser / Axios set the proper multipart boundary header.\r\n\tconst headers = isForm ? { ...(config.headers || {}) } : { 'Content-Type': 'application/json', ...(config.headers || {}) }\r\n\tconst res = await axios.post(base, payload, { headers, ...config })\r\n\treturn res.data\r\n}\r\n\r\n// Update guru. Accepts object or FormData.\r\nexport async function updateGuru(id, payload, config = {}) {\r\n\tconst isForm = typeof FormData !== 'undefined' && payload instanceof FormData\r\n\t// Do not set Content-Type manually for FormData; allow Axios/browser to include boundary\r\n\tconst headers = isForm ? { ...(config.headers || {}) } : { 'Content-Type': 'application/json', ...(config.headers || {}) }\r\n\tconst res = await axios.put(`${base}/${id}`, payload, { headers, ...config })\r\n\treturn res.data\r\n}\r\n\r\nexport async function deleteGuru(id) { const res = await axios.delete(`${base}/${id}`); return res.data }\r\n\r\nexport default { getAllGuru, getGuruById, createGuru, updateGuru, deleteGuru }\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,QAAQ;AAE7B,MAAMC,IAAI,GAAG,GAAGD,QAAQ,OAAO;AAE/B,OAAO,eAAeE,UAAUA,CAAA,EAAG;EAAE,MAAMC,GAAG,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAACH,IAAI,CAAC;EAAE,OAAOE,GAAG,CAACE,IAAI;AAAC;AACxF,OAAO,eAAeC,WAAWA,CAACC,EAAE,EAAE;EAAE,MAAMJ,GAAG,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,GAAGH,IAAI,IAAIM,EAAE,EAAE,CAAC;EAAE,OAAOJ,GAAG,CAACE,IAAI;AAAC;;AAEtG;AACA,OAAO,eAAeG,UAAUA,CAACC,OAAO,EAAEC,MAAM,GAAG,CAAC,CAAC,EAAE;EACtD,MAAMC,MAAM,GAAG,OAAOC,QAAQ,KAAK,WAAW,IAAIH,OAAO,YAAYG,QAAQ;EAC7E;EACA;EACA,MAAMC,OAAO,GAAGF,MAAM,GAAG;IAAE,IAAID,MAAM,CAACG,OAAO,IAAI,CAAC,CAAC;EAAE,CAAC,GAAG;IAAE,cAAc,EAAE,kBAAkB;IAAE,IAAIH,MAAM,CAACG,OAAO,IAAI,CAAC,CAAC;EAAE,CAAC;EAC1H,MAAMV,GAAG,GAAG,MAAMJ,KAAK,CAACe,IAAI,CAACb,IAAI,EAAEQ,OAAO,EAAE;IAAEI,OAAO;IAAE,GAAGH;EAAO,CAAC,CAAC;EACnE,OAAOP,GAAG,CAACE,IAAI;AAChB;;AAEA;AACA,OAAO,eAAeU,UAAUA,CAACR,EAAE,EAAEE,OAAO,EAAEC,MAAM,GAAG,CAAC,CAAC,EAAE;EAC1D,MAAMC,MAAM,GAAG,OAAOC,QAAQ,KAAK,WAAW,IAAIH,OAAO,YAAYG,QAAQ;EAC7E;EACA,MAAMC,OAAO,GAAGF,MAAM,GAAG;IAAE,IAAID,MAAM,CAACG,OAAO,IAAI,CAAC,CAAC;EAAE,CAAC,GAAG;IAAE,cAAc,EAAE,kBAAkB;IAAE,IAAIH,MAAM,CAACG,OAAO,IAAI,CAAC,CAAC;EAAE,CAAC;EAC1H,MAAMV,GAAG,GAAG,MAAMJ,KAAK,CAACiB,GAAG,CAAC,GAAGf,IAAI,IAAIM,EAAE,EAAE,EAAEE,OAAO,EAAE;IAAEI,OAAO;IAAE,GAAGH;EAAO,CAAC,CAAC;EAC7E,OAAOP,GAAG,CAACE,IAAI;AAChB;AAEA,OAAO,eAAeY,UAAUA,CAACV,EAAE,EAAE;EAAE,MAAMJ,GAAG,GAAG,MAAMJ,KAAK,CAACmB,MAAM,CAAC,GAAGjB,IAAI,IAAIM,EAAE,EAAE,CAAC;EAAE,OAAOJ,GAAG,CAACE,IAAI;AAAC;AAExG,eAAe;EAAEH,UAAU;EAAEI,WAAW;EAAEE,UAAU;EAAEO,UAAU;EAAEE;AAAW,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}