{"ast":null,"code":"// Base path used by the client. In development the CRA dev server sometimes\n// serves index.html for unknown paths (returning HTML), so we provide a\n// fallback to the backend origin (http://localhost:5000) when running on\n// localhost to avoid the \"Unexpected token '<'\" JSON parse error.\nconst API_BASE_PATH = '/api/tingkatans';\nconst BACKEND_ORIGIN = process.env.REACT_APP_API_BASE && process.env.REACT_APP_API_BASE.replace(/\\/$/, '') || 'http://localhost:5000';\n// In development prefer targeting the backend origin directly to avoid the CRA dev\n// server returning HTML for unknown API paths (e.g. \"Cannot POST /api/...\"). If\n// REACT_APP_API_BASE is provided we respect it. In production we keep the relative\n// path so the app works when served from the same origin as the backend.\nconst API_BASE = process.env.REACT_APP_API_BASE ? `${process.env.REACT_APP_API_BASE.replace(/\\/$/, '')}/api/tingkatans` : process.env.NODE_ENV === 'development' ? `${BACKEND_ORIGIN}/api/tingkatans` : API_BASE_PATH;\nasync function tryFetchWithDevFallback(path, opts) {\n  // First try using the provided path (relative or absolute) so production works.\n  let res = await fetch(path, opts);\n  const ct = res.headers.get('content-type') || '';\n\n  // If the response is not JSON and we're running the dev client locally (CRA dev server\n  // often uses localhost or 127.0.0.1), retry against the backend origin. This avoids the\n  // CRA dev server returning \"Cannot POST /api/...\" for API calls and lets us fallback to\n  // the actual backend at BACKEND_ORIGIN.\n  // Retry against backend origin when response is not JSON and the current\n  // frontend origin differs from the backend origin. This covers common local\n  // setups where the built app is served from a static server or CRA dev-server\n  // and the POST ends up handled by that server instead of the API.\n  if (!ct.includes('application/json') && typeof window !== 'undefined' && window.location) {\n    try {\n      const frontendHost = window.location.hostname;\n      const backendHost = new URL(BACKEND_ORIGIN).hostname;\n      if (frontendHost !== backendHost) {\n        const backendUrl = path.startsWith('http') ? path : `${BACKEND_ORIGIN}${path}`;\n        console.log(`↩️ Non-JSON response from ${path}; retrying request against backend ${backendUrl}`);\n        try {\n          res = await fetch(backendUrl, opts);\n        } catch (e) {\n          console.warn('Fallback fetch to backend failed', e);\n        }\n      }\n    } catch (e) {\n      // If URL parsing fails for some reason, don't block the original response\n    }\n  }\n  return res;\n}\nexport async function getAllTingkatans() {\n  const res = await tryFetchWithDevFallback(API_BASE);\n  if (!res.ok) {\n    const txt = await res.text().catch(() => '<no-body>');\n    throw new Error(`Failed to fetch tingkatans: ${res.status} ${txt}`);\n  }\n  const ct = res.headers.get('content-type') || '';\n  if (!ct.includes('application/json')) {\n    const txt = await res.text().catch(() => '<no-body>');\n    throw new Error(`Unexpected non-JSON response fetching tingkatans: ${txt}`);\n  }\n  return res.json();\n}\nexport async function createTingkatan(payload) {\n  const res = await tryFetchWithDevFallback(API_BASE, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(payload)\n  });\n  if (!res.ok) {\n    const txt = await res.text().catch(() => '<no-body>');\n    throw new Error(`Failed to create tingkatan: ${res.status} ${txt}`);\n  }\n  const ct = res.headers.get('content-type') || '';\n  if (!ct.includes('application/json')) {\n    const txt = await res.text().catch(() => '<no-body>');\n    throw new Error(`Unexpected non-JSON response creating tingkatan: ${txt}`);\n  }\n  return res.json();\n}\nexport async function updateTingkatan(id, payload) {\n  const res = await tryFetchWithDevFallback(`${API_BASE}/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(payload)\n  });\n  if (!res.ok) {\n    const txt = await res.text().catch(() => '<no-body>');\n    throw new Error(`Failed to update tingkatan: ${res.status} ${txt}`);\n  }\n  const ct = res.headers.get('content-type') || '';\n  if (!ct.includes('application/json')) {\n    const txt = await res.text().catch(() => '<no-body>');\n    throw new Error(`Unexpected non-JSON response updating tingkatan: ${txt}`);\n  }\n  return res.json();\n}\nexport async function deleteTingkatan(id) {\n  const res = await tryFetchWithDevFallback(`${API_BASE}/${id}`, {\n    method: 'DELETE'\n  });\n  if (!res.ok) {\n    const txt = await res.text().catch(() => '<no-body>');\n    throw new Error(`Failed to delete tingkatan: ${res.status} ${txt}`);\n  }\n}","map":{"version":3,"names":["API_BASE_PATH","BACKEND_ORIGIN","process","env","REACT_APP_API_BASE","replace","API_BASE","NODE_ENV","tryFetchWithDevFallback","path","opts","res","fetch","ct","headers","get","includes","window","location","frontendHost","hostname","backendHost","URL","backendUrl","startsWith","console","log","e","warn","getAllTingkatans","ok","txt","text","catch","Error","status","json","createTingkatan","payload","method","body","JSON","stringify","updateTingkatan","id","deleteTingkatan"],"sources":["C:/laragon/www/E-RAPORT-NUURUSH-SHOLAAH/e-raport-client/src/services/tingkatanService.ts"],"sourcesContent":["// Base path used by the client. In development the CRA dev server sometimes\r\n// serves index.html for unknown paths (returning HTML), so we provide a\r\n// fallback to the backend origin (http://localhost:5000) when running on\r\n// localhost to avoid the \"Unexpected token '<'\" JSON parse error.\r\nconst API_BASE_PATH = '/api/tingkatans';\r\nconst BACKEND_ORIGIN = (process.env.REACT_APP_API_BASE && process.env.REACT_APP_API_BASE.replace(/\\/$/, '')) || 'http://localhost:5000';\r\n// In development prefer targeting the backend origin directly to avoid the CRA dev\r\n// server returning HTML for unknown API paths (e.g. \"Cannot POST /api/...\"). If\r\n// REACT_APP_API_BASE is provided we respect it. In production we keep the relative\r\n// path so the app works when served from the same origin as the backend.\r\nconst API_BASE = (process.env.REACT_APP_API_BASE\r\n  ? `${process.env.REACT_APP_API_BASE.replace(/\\/$/, '')}/api/tingkatans`\r\n  : (process.env.NODE_ENV === 'development' ? `${BACKEND_ORIGIN}/api/tingkatans` : API_BASE_PATH)\r\n);\r\n\r\nasync function tryFetchWithDevFallback(path: string, opts?: RequestInit) {\r\n  // First try using the provided path (relative or absolute) so production works.\r\n  let res = await fetch(path, opts);\r\n  const ct = res.headers.get('content-type') || '';\r\n\r\n  // If the response is not JSON and we're running the dev client locally (CRA dev server\r\n  // often uses localhost or 127.0.0.1), retry against the backend origin. This avoids the\r\n  // CRA dev server returning \"Cannot POST /api/...\" for API calls and lets us fallback to\r\n  // the actual backend at BACKEND_ORIGIN.\r\n  // Retry against backend origin when response is not JSON and the current\r\n  // frontend origin differs from the backend origin. This covers common local\r\n  // setups where the built app is served from a static server or CRA dev-server\r\n  // and the POST ends up handled by that server instead of the API.\r\n  if ((!ct.includes('application/json')) && typeof window !== 'undefined' && window.location) {\r\n    try {\r\n      const frontendHost = window.location.hostname;\r\n      const backendHost = new URL(BACKEND_ORIGIN).hostname;\r\n      if (frontendHost !== backendHost) {\r\n        const backendUrl = (path.startsWith('http') ? path : `${BACKEND_ORIGIN}${path}`);\r\n        console.log(`↩️ Non-JSON response from ${path}; retrying request against backend ${backendUrl}`);\r\n        try {\r\n          res = await fetch(backendUrl, opts);\r\n        } catch (e) {\r\n          console.warn('Fallback fetch to backend failed', e);\r\n        }\r\n      }\r\n    } catch (e) {\r\n      // If URL parsing fails for some reason, don't block the original response\r\n    }\r\n  }\r\n  return res;\r\n}\r\n\r\nexport interface Tingkatan {\r\n  id: number;\r\n  nama_tingkatan: string;\r\n  urutan?: number;\r\n  createdAt?: string;\r\n  updatedAt?: string;\r\n}\r\n\r\nexport async function getAllTingkatans(): Promise<Tingkatan[]> {\r\n  const res = await tryFetchWithDevFallback(API_BASE);\r\n  if (!res.ok) {\r\n    const txt = await res.text().catch(()=>'<no-body>')\r\n    throw new Error(`Failed to fetch tingkatans: ${res.status} ${txt}`)\r\n  }\r\n  const ct = res.headers.get('content-type') || ''\r\n  if (!ct.includes('application/json')) {\r\n    const txt = await res.text().catch(()=>'<no-body>')\r\n    throw new Error(`Unexpected non-JSON response fetching tingkatans: ${txt}`)\r\n  }\r\n  return res.json();\r\n}\r\n\r\nexport async function createTingkatan(payload: Partial<Tingkatan>): Promise<Tingkatan> {\r\n  const res = await tryFetchWithDevFallback(API_BASE, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(payload),\r\n  });\r\n  if (!res.ok) {\r\n    const txt = await res.text().catch(()=>'<no-body>')\r\n    throw new Error(`Failed to create tingkatan: ${res.status} ${txt}`)\r\n  }\r\n  const ct = res.headers.get('content-type') || ''\r\n  if (!ct.includes('application/json')) {\r\n    const txt = await res.text().catch(()=>'<no-body>')\r\n    throw new Error(`Unexpected non-JSON response creating tingkatan: ${txt}`)\r\n  }\r\n  return res.json();\r\n}\r\n\r\nexport async function updateTingkatan(id: number, payload: Partial<Tingkatan>): Promise<Tingkatan> {\r\n  const res = await tryFetchWithDevFallback(`${API_BASE}/${id}`, {\r\n    method: 'PUT',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(payload),\r\n  });\r\n  if (!res.ok) {\r\n    const txt = await res.text().catch(()=>'<no-body>')\r\n    throw new Error(`Failed to update tingkatan: ${res.status} ${txt}`)\r\n  }\r\n  const ct = res.headers.get('content-type') || ''\r\n  if (!ct.includes('application/json')) {\r\n    const txt = await res.text().catch(()=>'<no-body>')\r\n    throw new Error(`Unexpected non-JSON response updating tingkatan: ${txt}`)\r\n  }\r\n  return res.json();\r\n}\r\n\r\nexport async function deleteTingkatan(id: number): Promise<void> {\r\n  const res = await tryFetchWithDevFallback(`${API_BASE}/${id}`, { method: 'DELETE' });\r\n  if (!res.ok) {\r\n    const txt = await res.text().catch(()=>'<no-body>')\r\n    throw new Error(`Failed to delete tingkatan: ${res.status} ${txt}`)\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}